#!/usr/bin/env python
#Author: fullsalvo

"""
Parses .Xresources-formatted text and creates a whizkers/zenbu
yaml-formatted template for colors. Can read from file or from
stdin.
"""

from __future__ import absolute_import, division, print_function
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from colorlog import ColoredFormatter
import os, re, sys, logging

home = os.getenv('HOME')
confdir = os.path.join(home,'.config')
wzdir = os.path.join(confdir, 'zenbu')
sets = 'variable_sets'
templatevar = """colors:
  background:         "{0}"
  foreground:         "{1}"
  cursor:             "{2}"
  black:
    normal:           "{3}"
    bold:             "{11}"
  red:
    normal:           "{4}"
    bold:             "{12}"
  green:
    normal:           "{5}"
    bold:             "{13}"
  yellow:
    normal:           "{6}"
    bold:             "{14}"
  blue:
    normal:           "{7}"
    bold:             "{15}"
  magenta:
    normal:           "{8}"
    bold:             "{16}"
  cyan:
    normal:           "{9}"
    bold:             "{17}"
  white:
    normal:           "{10}"
    bold:             "{18}"
"""

# Logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(logging.NullHandler())

class IOException(Exception):
    """
    Exception raised when no file was specified and there was no input in stdin
    """
    def __init__(self, io, message=None):
        super(IOException, self).__init__()
        self.message = message
        self.io = io

class NoInfileError(IOException):
    def __str__(self):
        msg = "No file of name \"%s\"" % self.io
        if self.message:
            msg += "\n   [%s]" % self.message
        return msg

class NoInputError(IOException):
    def __str__(self):
        return "No input file/text was provided."

def args():
    parser = ArgumentParser(description=__doc__,
                            formatter_class=RawDescriptionHelpFormatter)

    parser.add_argument('-o',
                        help="""
                        output file name specification (basename only)
                        """,
                        dest='outfile')

    parser.add_argument('-i',
                        help="""
                        input file name specification
                        """,
                        dest='infile')

    parser.add_argument('-c',
                        help="""
                        zenbu config folder specification, if not using
                        the default. (Default: %s)
                        """ % wzdir,
                        dest='config',
                        default=wzdir)

    parser.add_argument('-s',
                        help="""
                        variable set directory relative to zenbu config directory,
                        if not using the default sets location.
                        (Default: %s)
                        """ % sets,
                        dest='sets',
                        default=sets)

    parser.add_argument('-a',
                        help="""
                        additional variables to be added to the template.
                        """,
                        action='append',
                        nargs=2,
                        metavar=('var','value'))

    return parser, parser.parse_args()

def colorgather(xres):
    col = []
    col.append(colorgrab('background', xres))
    col.append(colorgrab('foreground', xres))
    cur = colorgrab('cursorColor', xres)
    if cur:
        col.append(cur)
    else:
        col.append(colorgrab('foreground', xres))
    for i in range(16):
        col.append(colorgrab('.*color' + str(i) + ':', xres))
    return col

def colorgrab(pat, xres):
    for line in xres.splitlines():
        if re.search(pat,line):
            color = line.split()
            return color[-1]

def template(xres):
    col = colorgather(xres)
    filledtemp = templatevar.format(*col)
    if arguments.a:
        for addition in arguments.a:
            if len(addition[0]) < 21:
                spacing = (22-(len(addition[0])+1))*" "
            else:
                spacing = " "
            newvartemp = addition[0] + ":" + spacing + addition[1] + "\n"
            filledtemp += newvartemp
    return filledtemp

def main():
    logout = logging.StreamHandler(sys.stdout)
    logout.setLevel(logging.DEBUG)
    logout.setFormatter(ColoredFormatter("%(log_color)s%(message)s"))
    logger.addHandler(logout)

    try:
        if arguments.infile:
            if not os.path.isfile(arguments.infile):
                raise(NoInfileError(arguments.infile))
            else:
                xres = open(arguments.infile, 'r')
        elif not sys.stdin.isatty():
            xres = sys.stdin
        else:
            raise(NoInputError(None))
        xres = xres.read()
        ftemp = template(xres)
        print(ftemp)
        if arguments.outfile:
            out = os.path.join(arguments.config, arguments.sets + "/" + \
                               arguments.outfile)
            tempwrite = open(out, 'w')
            tempwrite.write(ftemp)
    except NoInputError as e:
        logger.error(NoInputError(None, e))
        parser.print_help()
    except NoInfileError as e:
        logger.error(e)

if __name__ == '__main__':
    parser, arguments = args()
    main()
